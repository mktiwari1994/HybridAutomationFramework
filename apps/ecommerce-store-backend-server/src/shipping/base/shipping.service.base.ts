/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Shipping as PrismaShipping } from "@prisma/client";

export class ShippingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ShippingCountArgs, "select">): Promise<number> {
    return this.prisma.shipping.count(args);
  }

  async shippings(
    args: Prisma.ShippingFindManyArgs
  ): Promise<PrismaShipping[]> {
    return this.prisma.shipping.findMany(args);
  }
  async shipping(
    args: Prisma.ShippingFindUniqueArgs
  ): Promise<PrismaShipping | null> {
    return this.prisma.shipping.findUnique(args);
  }
  async createShipping(
    args: Prisma.ShippingCreateArgs
  ): Promise<PrismaShipping> {
    return this.prisma.shipping.create(args);
  }
  async updateShipping(
    args: Prisma.ShippingUpdateArgs
  ): Promise<PrismaShipping> {
    return this.prisma.shipping.update(args);
  }
  async deleteShipping(
    args: Prisma.ShippingDeleteArgs
  ): Promise<PrismaShipping> {
    return this.prisma.shipping.delete(args);
  }
}
